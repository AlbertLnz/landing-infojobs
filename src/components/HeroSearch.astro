---
import SearchIcon from "@icons/Search.astro"
import { getStudies } from "@lib/get-ij-studies"
import SectionContainer from "@components/SectionContainer.astro"
import Button from "@ui/Button.astro"
import ChevronDown from "@icons/ChevronDown.astro"

const SHORTCUTS = [
  {
    label: "üå±  Sin experiencia",
    href: "https://www.infojobs.net/jobsearch/search-results/list.xhtml?keyword=&segmentId=&page=1&sortBy=PUBLICATION_DATE&onlyForeignCountry=false&countryIds=17&sinceDate=ANY&experienceMin=_0_YEARS&experienceMax=_0_YEARS",
  },
  {
    label: "üóìÔ∏è  Findes",
    href: "https://www.infojobs.net/ofertas-trabajo/fines-de-semana",
  },
  {
    label: "üïí  Media jornada",
    href: "https://www.infojobs.net/ofertas-trabajo/media-jornada",
  },
  {
    label: "üíº  Pr√°cticas",
    href: "https://www.infojobs.net/ofertas-trabajo/practicas",
  },
] as const

const studies = await getStudies()
const sortedStudies = studies.sort((a, b) => a.order - b.order)
---
<SectionContainer>
  <section
    class="bg-hero-pattern rounded-3xl px-4 py-6 md:w-full md:max-w-7xl md:mx-auto"
  >
    <h1
      class="text-black/80 font-semibold tracking-[0.35px] text-2xl text-center pb-4 sm:text-4xl lg:hidden"
    >
      Tu carrera empieza aqu√≠
    </h1>

    <h1
      class="hidden text-black/80 font-semibold tracking-[0.35px] text-2xl text-center pb-4 sm:text-4xl lg:pb-8 lg:block"
    >
      Conecta tus estudios con el empleo ideal
    </h1>

    <search class="bg-white rounded-3xl p-4 lg:mx-10">
      <form id="hero-form" class="mx-5 lg:flex lg:justify-between lg:items-center">
        <div
          id="study-level-container"
          class="flex items-center border-b border-gray-300 lg:border-none relative cursor-pointer select-none outline-none focus-visible:outline-gray-300 rounded-md lg:w-full lg:px-4 lg:mr-2"
          tabindex="0"
          aria-haspopup="listbox"
          aria-expanded="false"
          aria-labelledby="study-level-container"
        >
          <div
            class="w-full py-4 text-gray-600 bg-transparent cursor-pointer flex justify-between items-center"
            aria-label="Selecciona tu nivel de estudios"
          >
            <span id="study-level-text">
              Nivel de estudios
            </span>

            <ChevronDown id="study-level-chevron" width="24" height="24" />
          </div>

          <div id="study-level-options" role="listbox" class="absolute top-full mt-2 rounded-lg left-0 max-h-80 w-full bg-white border border-gray-300 shadow-md hidden overflow-auto no-scrollbar z-20">
            {sortedStudies.map(({ id, value }) => {
              const isDefault = id === 0
              const literal = isDefault ? "Nivel de estudios" : value

              return (
                <div
                  id="study-level-option"
                  role="option"
                  class={`p-3 transition-colors duration-200 ease-in-out focus-visible:outline-gray-300 hover:bg-gray-100 ${isDefault ? "text-gray-400 bg-gray-100 pointer-events-none" : "text-gray-600"}`}
                  data-value={id}
                  aria-disabled={isDefault}
                  aria-selected={isDefault}
                  tabindex={isDefault ? -1 : 0}
                >
                  {literal}
                </div>
              )
            })}
          </div>
        </div>

        <div class="lg:w-full">
          <input
            name="keywords"
            placeholder="Estudios, puesto, empresa..."
            class="w-full py-4 border-b border-gray-300 text-gray-600 focus:outline-none lg:border-none"
          />
        </div>

        <div class="mb-8 lg:mb-0 lg:w-full">
          <input
            name="geolocation"
            placeholder="Provincia o poblaci√≥n"
            class="w-full py-4 text-gray-600 focus:outline-none"
          />
        </div>
        <Button
          type="submit"
          color="secondary"
          variant="solid"
          size="md"
          radius="full"
          class="shadow-md rounded-full text-lg font-medium bg-accent hover:saturate-150 transition text-white px-4 py-2 inline-flex gap-x-2 justify-center items-center w-full lg:size-12 lg:mt-1 lg:hover:scale-105"
          ariaLabel="Buscar ofertas"
        >
          <SearchIcon />
          <p class="lg:hidden">Buscar ofertas</p>
        </Button>
      </form>
    </search>

    <footer>
      <p class="text-center pt-8 pb-4">Explora trabajos que se adaptan a ti</h5>
      <div class="max-xs:grid-cols-1 max-sm:grid max-sm:grid-cols-2 flex flex-wrap gap-4 justify-center">
        {
          SHORTCUTS.map(({ label, href }) => (
            <Button
              as="link"
              href={href}
              color="default"
              variant="solid"
              radius="full"
              size="lg"
              class="bg-white whitespace-nowrap text-center rounded-full p-4 lg:px-6 shadow-sm text-primary transition hover:scale-105 hover:text-white hover:bg-primary !font-light"
              disableSaturateHover={true}
            >
              {label}
            </Button>
          ))
        }
      </div>
    </footer>
  </section>
</SectionContainer>

<script>
  const select = document.querySelector("select")

  function updateColors() {
    if (select?.value !== "indicar-nivel") {
      select?.classList.add("text-gray-600")
    }
  }

  document.addEventListener("DOMContentLoaded", updateColors)
  select?.addEventListener("change", updateColors)
</script>

<script>
  import { generateInfoJobsURL } from "@lib/generate-infojobs-url"

  const form = document.querySelector("#hero-form") as HTMLFormElement

  form?.addEventListener("submit", (event) => {
    event.preventDefault()
    const formData = new FormData(form)
    const level = formData.get("study-level")?.toString() ?? ""
    const keyword = formData.get("keywords")?.toString() ?? ""
    const provinceIds = form.querySelector('input[name="geolocation"]')?.getAttribute('value') ?? ""

    const searchURL = generateInfoJobsURL({
      keyword,
      level,
      provinceIds,
    })

    window.location.href = searchURL
  })
</script>

<script>
  import { getProvinceId } from "@lib/list-provinces-ids"
  const geolocationInput = document.querySelector('input[name="geolocation"]') as HTMLInputElement | null

  geolocationInput?.addEventListener("input", function() {
    getProvinceId(this)
  })
</script>

<script>
  const studyLevelContainer = document.getElementById('study-level-container')
  const studyLevelOptions = document.getElementById('study-level-options')
  const studyLevelOption = document.getElementById('study-level-option')
  const studyLevelText = document.getElementById('study-level-text')
  const studyLevelChevron = document.getElementById('study-level-chevron')
  const hiddenSelect = document.createElement('input')

  hiddenSelect.type = 'hidden'
  hiddenSelect.name = 'study-level'
  studyLevelContainer?.appendChild(hiddenSelect)

  studyLevelContainer?.addEventListener('click', () => {
    const isExpanded = studyLevelContainer?.getAttribute('aria-expanded') === 'true'
    studyLevelContainer?.setAttribute('aria-expanded', `${!isExpanded}`)
    studyLevelChevron?.classList.toggle('rotate-180')
    studyLevelOptions?.classList.toggle('hidden')
  })

  document.addEventListener('click', (event) => {
      if (!studyLevelContainer?.contains(event.target as Node)) {
        studyLevelContainer?.setAttribute('aria-expanded', 'false')
        studyLevelChevron?.classList.remove('rotate-180')
        studyLevelOptions?.classList.add('hidden')
      }
  })

  studyLevelContainer?.addEventListener('keydown', (event) => {
    const isExpanded = studyLevelContainer.getAttribute('aria-expanded') === 'true'

    if (event.key === 'Enter' || event.key === ' ') {
      if (!isExpanded) {
        studyLevelContainer.setAttribute('aria-expanded', 'true')
        studyLevelChevron?.classList.toggle('rotate-180')
        studyLevelOptions?.classList.toggle('hidden')
        event.preventDefault()
      } else {
        const activeOption = document.activeElement as Element | null
        const selectedOption = activeOption?.closest('[data-value]')

        if (selectedOption && selectedOption.getAttribute('data-value') !== '0') {
          const value = selectedOption.getAttribute('data-value')
          const text = selectedOption.textContent?.trim()

          if (studyLevelText && hiddenSelect) {
            studyLevelText.textContent = text as string
            hiddenSelect.value = value as string
          }

          studyLevelOptions?.querySelectorAll('[data-value]').forEach(option => {
            option.classList.remove('bg-gray-100')
          })
          selectedOption.classList.add('bg-gray-100')

          studyLevelContainer?.setAttribute('aria-expanded', 'false');
          studyLevelChevron?.classList.remove('rotate-180')
          studyLevelOptions?.classList.add('hidden')

          event.preventDefault()
        }
      }
    }

    if (isExpanded && (event.key === 'ArrowDown' || event.key === 'ArrowUp')) {
      const options = studyLevelOptions?.querySelectorAll('[data-value]') as NodeListOf<HTMLElement>
      let index = Array.from(options).findIndex(option => option === document.activeElement)

      if (event.key === 'ArrowDown') index++
      if (event.key === 'ArrowUp') index--
      if (index >= 0 && index < options.length) options[index]?.focus()

      event.preventDefault()
    }

    if (isExpanded && event.key === 'Escape') {
      studyLevelContainer?.setAttribute('aria-expanded', 'false')
      studyLevelChevron?.classList.remove('rotate-180')
      studyLevelOptions?.classList.add('hidden')
    }
  })

  studyLevelOptions?.addEventListener('click', (event) => {
    const target = event.target as Element | null
    const selectedOption = target?.closest('[data-value]')

    if (selectedOption && selectedOption.getAttribute('data-value') !== '0') {
      const value = selectedOption.getAttribute('data-value')
      const text = selectedOption.textContent?.trim()

      if (studyLevelText && hiddenSelect) {
        studyLevelText.textContent = text as string
        hiddenSelect.value = value as string
      }

      studyLevelOptions.querySelectorAll('[data-value]').forEach(option => {
        option.classList.remove('bg-gray-100')
      })
      selectedOption.classList.add('bg-gray-100')
    }
  })

  studyLevelOption?.addEventListener('click', () => {
    studyLevelContainer?.setAttribute('aria-expanded', 'false')
    studyLevelChevron?.classList.remove('rotate-180')
    studyLevelOptions?.classList.add('hidden')
  })

  studyLevelOptions?.addEventListener('wheel', (event) => {
    const { deltaY } = event
    const { scrollTop, scrollHeight, offsetHeight } = studyLevelOptions

    if (
      (deltaY < 0 && scrollTop === 0) ||
      (deltaY > 0 && scrollTop + offsetHeight >= scrollHeight)
    ) {
      event.preventDefault()
    }
  })
</script>